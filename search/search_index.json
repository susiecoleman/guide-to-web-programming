{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programming for the Web This guide covers HTML, CSS and Javascript which are used together to make interactive websites. They are sometimes referred to as 'front end technologies'. This is because they are used to build the part of a website the user interacts with directly. The term 'front end' is used in contrast to the term 'back end'. In web development back end refers to code running on a server. Wikipedia covers the difference between the two in more detail. Debugging If a website is not loading correctly in the browser then the developer tools can be used to diagnose the problem Chrome Developer Tools Firefox Developer Tools Getting Started A very basic website containing a javascript, html and css file already linked together can be downloaded from github . Codepen Codepen is a website that allows you to experiment with html css and javascript in the browser. There are multiple code examples in this guide that use codepen. To experiment with changing the code click 'edit on codepen' in any of the examples. Editing the examples on codepen will not affect the examples in the guide. Note: Codepen does not include head and body tags in it's examples so any code written would need to go inside the body tag if it was being added to a webpage.","title":"Programming for the Web"},{"location":"#programming-for-the-web","text":"This guide covers HTML, CSS and Javascript which are used together to make interactive websites. They are sometimes referred to as 'front end technologies'. This is because they are used to build the part of a website the user interacts with directly. The term 'front end' is used in contrast to the term 'back end'. In web development back end refers to code running on a server. Wikipedia covers the difference between the two in more detail.","title":"Programming for the Web"},{"location":"#debugging","text":"If a website is not loading correctly in the browser then the developer tools can be used to diagnose the problem Chrome Developer Tools Firefox Developer Tools","title":"Debugging"},{"location":"#getting-started","text":"A very basic website containing a javascript, html and css file already linked together can be downloaded from github .","title":"Getting Started"},{"location":"#codepen","text":"Codepen is a website that allows you to experiment with html css and javascript in the browser. There are multiple code examples in this guide that use codepen. To experiment with changing the code click 'edit on codepen' in any of the examples. Editing the examples on codepen will not affect the examples in the guide. Note: Codepen does not include head and body tags in it's examples so any code written would need to go inside the body tag if it was being added to a webpage.","title":"Codepen"},{"location":"css/","text":"CSS CSS stands for cascading style sheets. It is used to describe how a html document should look. In web development typically this means how it will look on the screen but it could also mean how it will look on paper. CSS is a style sheet language (as opposed to a mark up language or programming language). Using CSS styles can be applied to elements on the page. CSS Syntax CSS styles are applied to elements they have the following syntax: h1 { color: #ff0000; } The entire block is called the rule set. This is made up of the selector (in this case h1 ) and the declaration (in this case color: #ff0000 ). The declaration has 2 parts, the property ( color ) and the property value ( #ff0000 ). The selector can have multiple properties e.g. p { color: #ff00ff; font-size; 10px; } Selectors The selectors determine what part of the page the declarations will be applied to. Element Selectors This is when a style is applied to every element of a certain type. In the example below there are h1 , p and span tags and the selectors in the CSS have the same names as the tags they are applied to See the Pen PRGxaG by Susie ( @susiec20 ) on CodePen . Class Selectors Class selectors must always have a . at the start of their name when declared in the CSS. They can have any name provided it has no spaces. To apply the class to an element use the syntax class=className . In the example below the class blue-text is applied to a span tag and a h1 tag. Any element with the class on it will have the declarations for that class appiled to it e.g. turning the text blue. See the Pen Class Selectors by Susie ( @susiec20 ) on CodePen . ID Selectors ID selectors always start with a # when declared in the CSS and can have any name provided it has no spaces. An ID can only be applied to one element and allow you to uniquely identify a single element on the page. See the Pen ID Selector by Susie ( @susiec20 ) on CodePen . Pseudo Classes Pseudo classes are added to the end of selectors to indicate that you only want the style applied on that selector when the element is in a certain state e.g. when the element is hovered over. The syntax is selectorName:pseudoClass . In the example below the paragraph text changes size when you hover over it. See the Pen QmKzgV by Susie ( @susiec20 ) on CodePen . Properties There is a finite list of CSS properties that can be set on elements. Common CSS properties are available here . Cascading Styles Inheritance In CSS, inheritance controls what happens when property is set for a specific element. The the example below color is an inherited property. This is why the text in the span tag is red as well despite the colour of the text in the span tag never being specifically set. border is not an inherited property only the paragraph has a border around it. The text in the span tag does not have a border around it. See the Pen CSS Inheritance by Susie ( @susiec20 ) on CodePen . Inherited styles explain why the style of your web page can change even when a style has not been applied directly to an element. These styles can be overridden by more specific styles as shown in the example below. See the Pen Override styles by Susie ( @susiec20 ) on CodePen . If multiple styles are added with the same level of importance, for example definining multiple rule sets with the same selector, the declration that is further down the document will be applied. As shown in this example: See the Pen Identical styles by Susie ( @susiec20 ) on CodePen . Only conflicting rules are overridden. So in this case the background colour is applied from the first rule set but the value for the color property is overridden by the property further down the CSS document. Positioning Items on the Page - Box Model A web page is rendered by the browser as a series of boxes. CSS is used to determine the size, postition and properties (colour, border size, etc) of the box. Every box is made up of 4 parts: Content: This is the actual content of the element, text, an image etc. The size is set using the properties width ans height . Padding: This goes around the content area. The dimensions are set using padding-top , padding-bottom , padding-right and padding-left . This guide covers how to use the padding property as shorthand to set all 4 padding values. Border: The border goes around the padding area. The width of the border is set using border-width and the area. The border-style property makes the border visible. This guide covers how to use the border property to set multiple border properties at once. Margin: The margin is around the border and separates the element from it's nieghbours. The size is set using margin-top , margin-right , margin-bottom , margin-left . This guide covers how to use the margin property as shorthand to set all 4 padding margin. See the Pen Box Model CSS by Susie ( @susiec20 ) on CodePen . Padding seperates content from the border and the margin add space between the element in relation to other elements. Colour Names Colours in CSS are usually written as hexidecimal numbers . This website provides a tool to get a colour's hexidecimal value. Applying CSS to HTML Typically CSS is written in a different file to the HTML. This is known as an external stylesheet. In order for the styles in the css file to be applied to the html the css file needs to be linked to the html document. Imagine you have created 2 files in the same directory (or folder) on your computer one called style.css and one called index.html. To link them together a link tag nested within in the head tag is used. This is done within the head tag as linking to a style sheet is information about the webpage (metadata) as opposed to information that should appear on the webpage. !DOCTYPE html html head link rel= stylesheet href= style.css /head body /body /html Styles can also be applied using inline stylesheets and inline styles this article covers alternative approaches in more detail.","title":"CSS"},{"location":"css/#css","text":"CSS stands for cascading style sheets. It is used to describe how a html document should look. In web development typically this means how it will look on the screen but it could also mean how it will look on paper. CSS is a style sheet language (as opposed to a mark up language or programming language). Using CSS styles can be applied to elements on the page.","title":"CSS"},{"location":"css/#css-syntax","text":"CSS styles are applied to elements they have the following syntax: h1 { color: #ff0000; } The entire block is called the rule set. This is made up of the selector (in this case h1 ) and the declaration (in this case color: #ff0000 ). The declaration has 2 parts, the property ( color ) and the property value ( #ff0000 ). The selector can have multiple properties e.g. p { color: #ff00ff; font-size; 10px; }","title":"CSS Syntax"},{"location":"css/#selectors","text":"The selectors determine what part of the page the declarations will be applied to.","title":"Selectors"},{"location":"css/#element-selectors","text":"This is when a style is applied to every element of a certain type. In the example below there are h1 , p and span tags and the selectors in the CSS have the same names as the tags they are applied to See the Pen PRGxaG by Susie ( @susiec20 ) on CodePen .","title":"Element Selectors"},{"location":"css/#class-selectors","text":"Class selectors must always have a . at the start of their name when declared in the CSS. They can have any name provided it has no spaces. To apply the class to an element use the syntax class=className . In the example below the class blue-text is applied to a span tag and a h1 tag. Any element with the class on it will have the declarations for that class appiled to it e.g. turning the text blue. See the Pen Class Selectors by Susie ( @susiec20 ) on CodePen .","title":"Class Selectors"},{"location":"css/#id-selectors","text":"ID selectors always start with a # when declared in the CSS and can have any name provided it has no spaces. An ID can only be applied to one element and allow you to uniquely identify a single element on the page. See the Pen ID Selector by Susie ( @susiec20 ) on CodePen .","title":"ID Selectors"},{"location":"css/#pseudo-classes","text":"Pseudo classes are added to the end of selectors to indicate that you only want the style applied on that selector when the element is in a certain state e.g. when the element is hovered over. The syntax is selectorName:pseudoClass . In the example below the paragraph text changes size when you hover over it. See the Pen QmKzgV by Susie ( @susiec20 ) on CodePen .","title":"Pseudo Classes"},{"location":"css/#properties","text":"There is a finite list of CSS properties that can be set on elements. Common CSS properties are available here .","title":"Properties"},{"location":"css/#cascading-styles","text":"","title":"Cascading Styles"},{"location":"css/#inheritance","text":"In CSS, inheritance controls what happens when property is set for a specific element. The the example below color is an inherited property. This is why the text in the span tag is red as well despite the colour of the text in the span tag never being specifically set. border is not an inherited property only the paragraph has a border around it. The text in the span tag does not have a border around it. See the Pen CSS Inheritance by Susie ( @susiec20 ) on CodePen . Inherited styles explain why the style of your web page can change even when a style has not been applied directly to an element. These styles can be overridden by more specific styles as shown in the example below. See the Pen Override styles by Susie ( @susiec20 ) on CodePen . If multiple styles are added with the same level of importance, for example definining multiple rule sets with the same selector, the declration that is further down the document will be applied. As shown in this example: See the Pen Identical styles by Susie ( @susiec20 ) on CodePen . Only conflicting rules are overridden. So in this case the background colour is applied from the first rule set but the value for the color property is overridden by the property further down the CSS document.","title":"Inheritance"},{"location":"css/#positioning-items-on-the-page-box-model","text":"A web page is rendered by the browser as a series of boxes. CSS is used to determine the size, postition and properties (colour, border size, etc) of the box. Every box is made up of 4 parts: Content: This is the actual content of the element, text, an image etc. The size is set using the properties width ans height . Padding: This goes around the content area. The dimensions are set using padding-top , padding-bottom , padding-right and padding-left . This guide covers how to use the padding property as shorthand to set all 4 padding values. Border: The border goes around the padding area. The width of the border is set using border-width and the area. The border-style property makes the border visible. This guide covers how to use the border property to set multiple border properties at once. Margin: The margin is around the border and separates the element from it's nieghbours. The size is set using margin-top , margin-right , margin-bottom , margin-left . This guide covers how to use the margin property as shorthand to set all 4 padding margin. See the Pen Box Model CSS by Susie ( @susiec20 ) on CodePen . Padding seperates content from the border and the margin add space between the element in relation to other elements.","title":"Positioning Items on the Page - Box Model"},{"location":"css/#colour-names","text":"Colours in CSS are usually written as hexidecimal numbers . This website provides a tool to get a colour's hexidecimal value.","title":"Colour Names"},{"location":"css/#applying-css-to-html","text":"Typically CSS is written in a different file to the HTML. This is known as an external stylesheet. In order for the styles in the css file to be applied to the html the css file needs to be linked to the html document. Imagine you have created 2 files in the same directory (or folder) on your computer one called style.css and one called index.html. To link them together a link tag nested within in the head tag is used. This is done within the head tag as linking to a style sheet is information about the webpage (metadata) as opposed to information that should appear on the webpage. !DOCTYPE html html head link rel= stylesheet href= style.css /head body /body /html Styles can also be applied using inline stylesheets and inline styles this article covers alternative approaches in more detail.","title":"Applying CSS to HTML"},{"location":"html/","text":"HTML HTML stands for Hyper Text Markup Language. It gives a page of text a semantic structure e.g. This is text is a paragraph, this text is a header, this is an image, this is link. The browser will then use this information to decide how to display the text in the html document. For example, header text should be bigger than paragraph text. Elements The items that make up a web page (paragraphs, headers, images etc.) are referred to as elements. A webpage is a collection of elements. Tags Tags are used to indicate an element (e.g. this is a paragraph). A html document is text annotated with html tags and a web page is a html document. Tags look like this: p This is a paragraph /p There is a finite list of tags as browsers need to know all available tags in order to decide how to handle them. This list is maintained by W3C (World Wide Web Consortium) . A list of all elements is available here . Attributes Elements can have attributes that provide additional information about the element or adjust the behaviour of the element. For example when using an image tag an attribute is used to provide the link to an image. When using a form tag you can use it's autocomplete attribute to determine whether or not values can be autocompleted by the browswer. A list of all attributes is available here . Attributes on tags look like this: p style= color:red This is a paragraph with an attribute /p Structuring a HTML Document This is a very basic HTML document. !DOCTYPE html html head /head body /body /html In a html document there is a top level tag ( html ) and then the other tags are nested within these tags. Between an opening and closing tag of the same type there can be text and there can be other html tags This means the structure of a webpage is like a tree. The html tag is the top level tag and it has 2 children head and body . The head tag will contain information about the page (sometimes called metadata) e.g. links to the css. The body tag contains the html for content that is visible on your site. This is a more complicated example including some more html tags. !DOCTYPE html html head title Bees Website /title /head body h1 Bees /h1 p Bees are flying insects closely related to wasps and ants, known for their role in pollination and, in the case of the best-known bee species, the European honey bee, for producing honey and beeswax. Bees are a monophyletic lineage within the superfamily Apoidea and are presently considered a clade, called Anthophila. There are nearly 20,000 known species of bees in seven recognized biological families. They are found on every continent except Antarctica, in every habitat on the planet that contains insect-pollinated flowering plants. /p p Bees are adapted for feeding on nectar and pollen, the former primarily as an energy source and the latter primarily for protein and other nutrients. Most pollen is used as food for larvae. Bee pollination is important both ecologically and commercially; the decline in wild bees has increased the value of pollination by commercially managed hives of honey bees. /p h2 Bees that live in colonies /h2 ul li Honey Bees /li li Bumblebees /li li Stingless Bees /li /ul img src= https://upload.wikimedia.org/wikipedia/commons/3/32/Bee-apis.jpg / /body /html This shows what the html looks like when rendered by a browser. By clicking on 'edit on Codepen' you can experiment with changing the html or adding new html tags. Note codepen does not include head and body tags in it's examples so any code written here would need to go inside the body tag if it was being added to a webpage. See the Pen Basic HTML Elements by Susie ( @susiec20 ) on CodePen . The tree for this document: Div and Span Tag Tags do two things: Provide semantic information about the parts of the website (Paragraphs, headers, images) Group information together. This is shown by nested tags. For example the body tag indicates that everything between the opening body tag and closing body tag is part of the visible web site. The div and span tag have no effect on the layout until they are styled by css. This is useful for grouping content together or selecting a specific piece of content without having to worry about overriding default styles. Div tag A div tag is a block element which means by default it takes up the full width of the page. But this can be changed using css. This example shows using div tags to group the content into 2 columns. Then css is used to add the style that makes the content appear in 2 columns. The html tag is providing the semantic information 'this content is in 2 columns' and the css what actually makes the content appear in 2 columns. See the Pen Basic usecase for divs by Susie ( @susiec20 ) on CodePen . Span tag A span tag is an inline element which means it only occupies the space bounded by the tag rather than taking up the full width of the page. This example shows how to use a span tag to apply a style to specific part of the paragraph. See the Pen Basic span example by Susie ( @susiec20 ) on CodePen . A more detailed summary and example of the difference between inline and block level elements is available on the MDN web docs","title":"HTML"},{"location":"html/#html","text":"HTML stands for Hyper Text Markup Language. It gives a page of text a semantic structure e.g. This is text is a paragraph, this text is a header, this is an image, this is link. The browser will then use this information to decide how to display the text in the html document. For example, header text should be bigger than paragraph text.","title":"HTML"},{"location":"html/#elements","text":"The items that make up a web page (paragraphs, headers, images etc.) are referred to as elements. A webpage is a collection of elements.","title":"Elements"},{"location":"html/#tags","text":"Tags are used to indicate an element (e.g. this is a paragraph). A html document is text annotated with html tags and a web page is a html document. Tags look like this: p This is a paragraph /p There is a finite list of tags as browsers need to know all available tags in order to decide how to handle them. This list is maintained by W3C (World Wide Web Consortium) . A list of all elements is available here .","title":"Tags"},{"location":"html/#attributes","text":"Elements can have attributes that provide additional information about the element or adjust the behaviour of the element. For example when using an image tag an attribute is used to provide the link to an image. When using a form tag you can use it's autocomplete attribute to determine whether or not values can be autocompleted by the browswer. A list of all attributes is available here . Attributes on tags look like this: p style= color:red This is a paragraph with an attribute /p","title":"Attributes"},{"location":"html/#structuring-a-html-document","text":"This is a very basic HTML document. !DOCTYPE html html head /head body /body /html In a html document there is a top level tag ( html ) and then the other tags are nested within these tags. Between an opening and closing tag of the same type there can be text and there can be other html tags This means the structure of a webpage is like a tree. The html tag is the top level tag and it has 2 children head and body . The head tag will contain information about the page (sometimes called metadata) e.g. links to the css. The body tag contains the html for content that is visible on your site. This is a more complicated example including some more html tags. !DOCTYPE html html head title Bees Website /title /head body h1 Bees /h1 p Bees are flying insects closely related to wasps and ants, known for their role in pollination and, in the case of the best-known bee species, the European honey bee, for producing honey and beeswax. Bees are a monophyletic lineage within the superfamily Apoidea and are presently considered a clade, called Anthophila. There are nearly 20,000 known species of bees in seven recognized biological families. They are found on every continent except Antarctica, in every habitat on the planet that contains insect-pollinated flowering plants. /p p Bees are adapted for feeding on nectar and pollen, the former primarily as an energy source and the latter primarily for protein and other nutrients. Most pollen is used as food for larvae. Bee pollination is important both ecologically and commercially; the decline in wild bees has increased the value of pollination by commercially managed hives of honey bees. /p h2 Bees that live in colonies /h2 ul li Honey Bees /li li Bumblebees /li li Stingless Bees /li /ul img src= https://upload.wikimedia.org/wikipedia/commons/3/32/Bee-apis.jpg / /body /html This shows what the html looks like when rendered by a browser. By clicking on 'edit on Codepen' you can experiment with changing the html or adding new html tags. Note codepen does not include head and body tags in it's examples so any code written here would need to go inside the body tag if it was being added to a webpage. See the Pen Basic HTML Elements by Susie ( @susiec20 ) on CodePen . The tree for this document:","title":"Structuring a HTML Document"},{"location":"html/#div-and-span-tag","text":"Tags do two things: Provide semantic information about the parts of the website (Paragraphs, headers, images) Group information together. This is shown by nested tags. For example the body tag indicates that everything between the opening body tag and closing body tag is part of the visible web site. The div and span tag have no effect on the layout until they are styled by css. This is useful for grouping content together or selecting a specific piece of content without having to worry about overriding default styles.","title":"Div and Span Tag"},{"location":"html/#div-tag","text":"A div tag is a block element which means by default it takes up the full width of the page. But this can be changed using css. This example shows using div tags to group the content into 2 columns. Then css is used to add the style that makes the content appear in 2 columns. The html tag is providing the semantic information 'this content is in 2 columns' and the css what actually makes the content appear in 2 columns. See the Pen Basic usecase for divs by Susie ( @susiec20 ) on CodePen .","title":"Div tag"},{"location":"html/#span-tag","text":"A span tag is an inline element which means it only occupies the space bounded by the tag rather than taking up the full width of the page. This example shows how to use a span tag to apply a style to specific part of the paragraph. See the Pen Basic span example by Susie ( @susiec20 ) on CodePen . A more detailed summary and example of the difference between inline and block level elements is available on the MDN web docs","title":"Span tag"},{"location":"interactiveJavascript/","text":"Interactive Javascript Javascript can be used to manipulate the HTML that makes up a webpage. This allows the page to be interactive and change depending on what actions a user does. For example, you could define a button using the html tag button . You could combine this with javascript to detect when the button is clicked. The javascript code that runs after you click the button could change the CSS to make the font of the page larger. This is an example of HTML, CSS and javascript all working together so that a webpage is interactive. You can write a webpage using only HTML and CSS. The webpage will look the same for everyone who visits it. This is called a static webpage, it never changes. By using javascript you can make a dynamic website, this is a website that changes based on user actions. The DOM (Document Object Model) The DOM is provided by the javascript language and lets you easily access parts of a html page and then manipulate the page, for example changing the font colour or adding more html to a page. This is how interactivity can be added to a website. For example if you wanted to build a multiple choice quiz website with radio buttons for every possible answer and a button to allow whoever visited your website to check their answers. You would write the questions and the check button in a html document. But you would need to add javascript to make it interactive. The javascript code would run when the button was pressed. The javascript code would find the radio buttons in the html page and see which ones were selected. From this you could work out how many your user got right. The javascript code could then add a paragraph element to the html page telling the user how many answers the user got right. Using the DOM to get HTML elements var body = document.body This will get everything inside the body tag on the html page and assign to to the variable body . The HTML page of this guide covered how a HTML page can be viewed as a tree where every HTML tag has a parent and children. This model can be applied here as well. Once we have used document.body and have the body we can get all the children of body. !DOCTYPE html html head title Bees Website /title /head body h1 Bees /h1 p I like bees. /p p Bees are nice. /p /body /html In this example HTML document the body tag has 3 children h1 Bees /h1 p I like bees. /p p Bees are nice /p To select these 3 elements in our javascript code we can do: //Get the body of the html page var body = document.body; //Get all the children of the body. This will return an array. var children = body.children; Because our html page is just a tree we can 'walk the tree' and keep getting the children of children nodes until we get the element we need. !DOCTYPE html html head title Bees Website /title /head body h1 Bees /h1 ul li Honey Bees /li li Bumblebees /li li Stingless Bees /li /ul /body /html For example if we had this webpage and wanted the second item on the list we could do: //Get the body of the html page var body = document.body; //Get all the children of the body. This will return an array. var children = body.children; //Get the second item on the list (Don't forget the first item on a list is at index 0) var beeList = children[1]; //Get the second item on the list var itemTwo = list[1]; But this can get quite complicated especially if you have a complex webpage. It is possible to get an item on the page directly. !DOCTYPE html html head title Bees Website /title /head body h1 Bees /h1 ul li Honey Bees /li li id='second' Bumblebees /li li Stingless Bees /li /ul /body /html This is the same webpage but with an id on item 2 in the list. Now it's easy to get the element directly. var item2 = document.getElementById('second'); Another option is to get all elements by type. For example if you wanted to add an accessablity button to your website to allow a user to change the font size of all of the paragraphs. It would be really useful to be able to select all of the paragraphs at once. //Gets an array of all the paragraphs var paragraphs = document.getElementsByTagName( p ); //Gets an array of all the images var images = document.getElementsByTagName( img ); Using Javascript to Set Attributes Event Listeners Applying Javascript to HTML Typically Javascript is written in a different file to the HTML. In order for the javascript to run when the html page is loaded the javascript file needs to be linked to the html document. Imagine you have created 2 files in the same directory (or folder) on your computer one called script.js and one called index.html. To link them together a script tag is used. !DOCTYPE html html head /head body h1 My Website /h1 script src= script.js /script /body /html The script tag can in theory go anywhere as long as it's within the html tag. However it typically is the final tag within the body tag so that all of the html content is parsed by the browser before it tries to get the javascript file. This allows your user to start reading the site even if the javascript hasn't yet run. This is useful for slow web connections. Also it means all the elements of the page that the javascript might manipute or refer to will have been rendered by the browser.","title":"Interactive Javascript"},{"location":"interactiveJavascript/#interactive-javascript","text":"Javascript can be used to manipulate the HTML that makes up a webpage. This allows the page to be interactive and change depending on what actions a user does. For example, you could define a button using the html tag button . You could combine this with javascript to detect when the button is clicked. The javascript code that runs after you click the button could change the CSS to make the font of the page larger. This is an example of HTML, CSS and javascript all working together so that a webpage is interactive. You can write a webpage using only HTML and CSS. The webpage will look the same for everyone who visits it. This is called a static webpage, it never changes. By using javascript you can make a dynamic website, this is a website that changes based on user actions.","title":"Interactive Javascript"},{"location":"interactiveJavascript/#the-dom-document-object-model","text":"The DOM is provided by the javascript language and lets you easily access parts of a html page and then manipulate the page, for example changing the font colour or adding more html to a page. This is how interactivity can be added to a website. For example if you wanted to build a multiple choice quiz website with radio buttons for every possible answer and a button to allow whoever visited your website to check their answers. You would write the questions and the check button in a html document. But you would need to add javascript to make it interactive. The javascript code would run when the button was pressed. The javascript code would find the radio buttons in the html page and see which ones were selected. From this you could work out how many your user got right. The javascript code could then add a paragraph element to the html page telling the user how many answers the user got right.","title":"The DOM (Document Object Model)"},{"location":"interactiveJavascript/#using-the-dom-to-get-html-elements","text":"var body = document.body This will get everything inside the body tag on the html page and assign to to the variable body . The HTML page of this guide covered how a HTML page can be viewed as a tree where every HTML tag has a parent and children. This model can be applied here as well. Once we have used document.body and have the body we can get all the children of body. !DOCTYPE html html head title Bees Website /title /head body h1 Bees /h1 p I like bees. /p p Bees are nice. /p /body /html In this example HTML document the body tag has 3 children h1 Bees /h1 p I like bees. /p p Bees are nice /p To select these 3 elements in our javascript code we can do: //Get the body of the html page var body = document.body; //Get all the children of the body. This will return an array. var children = body.children; Because our html page is just a tree we can 'walk the tree' and keep getting the children of children nodes until we get the element we need. !DOCTYPE html html head title Bees Website /title /head body h1 Bees /h1 ul li Honey Bees /li li Bumblebees /li li Stingless Bees /li /ul /body /html For example if we had this webpage and wanted the second item on the list we could do: //Get the body of the html page var body = document.body; //Get all the children of the body. This will return an array. var children = body.children; //Get the second item on the list (Don't forget the first item on a list is at index 0) var beeList = children[1]; //Get the second item on the list var itemTwo = list[1]; But this can get quite complicated especially if you have a complex webpage. It is possible to get an item on the page directly. !DOCTYPE html html head title Bees Website /title /head body h1 Bees /h1 ul li Honey Bees /li li id='second' Bumblebees /li li Stingless Bees /li /ul /body /html This is the same webpage but with an id on item 2 in the list. Now it's easy to get the element directly. var item2 = document.getElementById('second'); Another option is to get all elements by type. For example if you wanted to add an accessablity button to your website to allow a user to change the font size of all of the paragraphs. It would be really useful to be able to select all of the paragraphs at once. //Gets an array of all the paragraphs var paragraphs = document.getElementsByTagName( p ); //Gets an array of all the images var images = document.getElementsByTagName( img );","title":"Using the DOM to get HTML elements"},{"location":"interactiveJavascript/#using-javascript-to-set-attributes","text":"","title":"Using Javascript to Set Attributes"},{"location":"interactiveJavascript/#event-listeners","text":"","title":"Event Listeners"},{"location":"interactiveJavascript/#applying-javascript-to-html","text":"Typically Javascript is written in a different file to the HTML. In order for the javascript to run when the html page is loaded the javascript file needs to be linked to the html document. Imagine you have created 2 files in the same directory (or folder) on your computer one called script.js and one called index.html. To link them together a script tag is used. !DOCTYPE html html head /head body h1 My Website /h1 script src= script.js /script /body /html The script tag can in theory go anywhere as long as it's within the html tag. However it typically is the final tag within the body tag so that all of the html content is parsed by the browser before it tries to get the javascript file. This allows your user to start reading the site even if the javascript hasn't yet run. This is useful for slow web connections. Also it means all the elements of the page that the javascript might manipute or refer to will have been rendered by the browser.","title":"Applying Javascript to HTML"},{"location":"javascript/","text":"Javascript Javascript is a programming language and can be used to make a website interactive. It is used in front end web development but it is very versitile so it can also be used in back end development. The concepts covered are applicable to other programming languages. Javascript is a series of instructions each instruction ends with a semicolon and the instructions are executed in the order they are written in the file. JSBin JSBin is an online service that allows you to test out javascript. Javascript goes in the left hand pane then just click run to see the results. However to get anything to print out you will need to use console.log() . There are links to interactive examples of all the javascript code in this guide. Debugging - Console.log The console.log command outputs a message to the web console . This is useful for finding out what is going wrong with a program, for example logging the value of a variable. console.log( This is a console log. ); Interactive Version Variables Variables are used to assign names to values. For example the number 200 could refer to anything but if it is assigned to a variable var heightInCm = 200 it has a meaning. Variables can be reassigned to new values e.g. var heightInCm = 200; heightInCm = 151; In these examples var is used to create a variable. Javascript also has const and let for declaring variables but they work slightly differently. The declarations part of this guide covers the differences. var name; name = Susie ; var height = 171; name = Anna ; Interactive Version Types Boolean - This type can have only 2 values true or false Number - These can be whole numbers (integers) or decimals (floating point numbers) Strings - A sequence of characters surrounded by quotes // Boolean values var skyIsBlue = true; var earthIsFlat = false; // Integers var total = 35; // Floating point numbers var pi = 3.14; // Strings var capitalCity = London ; var meaningOfLife = 42 ; var punctuation = @\u00a3$`!!{} ; Interactive Version Operations on Numbers In javascript it is possible to add + subtract - multiply * and divide / numbers. Numbers can also be incremented using ++ and decremented using -- Comments // In a javascript file denotes a comment. Any line that starts with // The browser will ignore. So in this example var x = 5; // x = 6; console.log(x); The value printed out will be 5 Arrays An array is a list of items. For example [1,2,3]; []; [ apple , banana , cherry ]; [4, cat , true]; are all arrays. But typically they are assigned to a variable var shoppingList = [ apple , banana , cherry ]; There are multiple operations that can be performed on an array. It is possible to get a specific item from an array by it's index: var shoppingList = [ apple , banana , cherry ]; var firstItem = shoppingList[0]; Note the index of an array start from zero. It is also possible to get the number of items in a list: var shoppingList = [ apple , banana , cherry ]; var length = shoppingList.length; and add an item to the end of the list: var shoppingList = [ apple , banana , cherry ]; shoppingList.push( dates ); Interactive version of all array examples Full guide on arrays Conditional Statements These are also know as if else statements. They are used to make sure that code is only executed if a statement is true. For example you might want your program to do something different depending on whether a variable has an even or an odd value. An if statement has the following structure: if(condition){ statement; } else { otherStatement; } where statement is executed if the condition is true and otherStatement is executed if it is false. Conditions The condition is a statement that evaluates to true or false. The expressions below all evaluate to true and show the different ways of comparing 2 items // 3 is equal to 3 3 === 3 // 3 is not equal to 2 3 !== 2 // 3 is less than 5 3 5 // 3 is greater than 1 3 1 // 3 is less than or equal to 3 3 = 3 // 3 is greater than or equal to 3 3 = 3 Putting it all together var number = 5; if(number !== 5) { console.log( This is true ); } else { console.log( This is false ); } Interactive Version Conditional statements make code more interesting. Up to this point all the code has done the same thing every time it is run. With the introduction of if statement what the code does when executed now depends on whether or not the conditional statement is true or false. In the example above if number is assigned to 6 instead of 5 the code will do something different when it is run. Loops A common scenario in programming is to want to execute the same instruction multiple times. For example printing to the console. One solution is to write the same line of code multiple times: console.log( hello ); console.log( hello ); console.log( hello ); console.log( hello ); console.log( hello ); However this is time consuming (even with copy and paste) and if we wanted to print goodbye instead it would be neccessary to change it 5 times. A better solution is to use a loop. For Loops A for loop will repeat until a condition is false. So if the condition is never false it will run forever. for(var i = 0; i 5 ; i++) { console.log( hello ); } Interactive Example What the code above does is: create a variable called i and give it the value 0 check if i is less than 5 execute the code inside the curly brackets: console.log(\"hello\") Add 1 to i The code will continue to loop doing steps 2 to 4 until i is no longer less than 5. Once the loop has finished running the next line of code will be executed. For example for this program: for(var i = 0; i 5 ; i++) { console.log( hello ); } console.log( Finished executing loop ); Interactive Version The output would be: hello hello hello hello hello Finished executing loop The variable i we create can also be referred to in the code. For example if we wanted to print the numbers 1 to 10: for(var i = 1; i = 10 ; i++) { console.log(i); } Interactive Version For Loops and Lists For loops can be used to iterate through lists. var fruits = [ apple , banana , cherry ]; for(var i = 0; i fruits.length; i++) { console.log(fruits[i]); } Interactive Version In this example the condition that makes the loop stops looping is related to the length of the list. Also the variable i is used as the index to retreive items from the list. Functions Functions are a way to prevent you from having to write the same piece of code mutiple times. For example if you had to find the mean of 3 lists you would need to do the following: var mathsTestScores = [50, 70, 35, 60] var mathsTotal = 0; for(var i = 0; i mathsTestScores.length; i++) { mathsTotal = mathsTotal + mathsTestScores[i]; } var mathsAverageScore = mathsTotal / mathsTestScores.length var scienceTestScores = [65, 93, 52, 10] var scienceTotal = 0; for(var i = 0; i scienceTestScores.length; i++) { scienceTotal = scienceTotal + scienceTestScores[i]; } var scienceAverageScore = scienceTotal / scienceTestScores.length var englishTestScores = [53, 80, 49, 61] var englishTotal = 0; for(var i = 0; i englishTestScores.length; i++) { englishTotal = englishTotal + englishTestScores[i]; } var englishAverageScore = englishTotal / englishTestScores.length Interactive Version This is a lot of duplicated code. This is more effort to type out but also it's more likely you will make mistakes than if you were only typing it out once. Also if you changed the way you calculated the average and wanted the median instead of the mean you would need to change the code in lots of places. The solution is to use functions. Functions are bits of code that can be reused. The Syntax function printHello() { console.log( Hello! ); } There are a few different parts to a function. First the function bit. This is to indicate that this will be a function. printHello this is the name of the function. Like variables this is how we refer to the function elsewhere in the code. You should give a function a name that reflects what it does. All functions need () , later examples will show why. The {} surround the code that belongs to the function and determines what the code actually does. So in the example above the function will console log Hello! . This code is not enough to actually get the function to do anything it just defines what the function will do. To actually get the code to log Hello! to the console you need to call it. printHello(); Interactive Version The name followed by () will execute the function and will cause the code inside the function to run. This is called calling a function. The function can be called many times. More Interesting Functions A common problem in programming is performing a calculation for example working out the average of a list of scores. In order to do this the function also needs to know which list it is calculating the average of. This means the function also needs a parameter. This allows the caller of the function to give the function extra information. function calculateMean(scores){ var total = 0; for(var i = 0; i scores.length; i++) { total = total + total[i]; } var mean = total / scores.length; console.log(mean); } var mathsTestScores = [50, 70, 35, 60]; var scienceTestScores = [65, 93, 52, 10]; var englishTestScores = [53, 80, 49, 61]; calculateMean(mathsTestScores); calculateMean(englishTestScores); calculateMean(scienceTestScores); Interactive Version In this example the test scores are passed in and the result is logged to the console. There is much less duplication. Returning Values In all the fucntion examples so far the result is logged straight to the console. This is not very useful. For example if you were making a website for a school you probably wouldn't want to log the mean score but display them on a website. This is done by using the return statement. function calculateMean(scores){ var total = 0; for(var i = 0; i scores.length; i++) { total = total + scores[i]; } var mean = total / scores.length; return mean; } var mathsTestScores = [50, 70, 35, 60]; var mean = calculateMean(mathsTestScores); Interactive Version Now the function doesn't log anything to the console it returns the result to the caller. In this example we have taken this value and assigned it to the variable called mean . We can now do anything with this variable we would do with any other variable. It could be logged to the console, displayed on a web page, passed to another function etc.","title":"Javascript"},{"location":"javascript/#javascript","text":"Javascript is a programming language and can be used to make a website interactive. It is used in front end web development but it is very versitile so it can also be used in back end development. The concepts covered are applicable to other programming languages. Javascript is a series of instructions each instruction ends with a semicolon and the instructions are executed in the order they are written in the file.","title":"Javascript"},{"location":"javascript/#jsbin","text":"JSBin is an online service that allows you to test out javascript. Javascript goes in the left hand pane then just click run to see the results. However to get anything to print out you will need to use console.log() . There are links to interactive examples of all the javascript code in this guide.","title":"JSBin"},{"location":"javascript/#debugging-consolelog","text":"The console.log command outputs a message to the web console . This is useful for finding out what is going wrong with a program, for example logging the value of a variable. console.log( This is a console log. ); Interactive Version","title":"Debugging - Console.log"},{"location":"javascript/#variables","text":"Variables are used to assign names to values. For example the number 200 could refer to anything but if it is assigned to a variable var heightInCm = 200 it has a meaning. Variables can be reassigned to new values e.g. var heightInCm = 200; heightInCm = 151; In these examples var is used to create a variable. Javascript also has const and let for declaring variables but they work slightly differently. The declarations part of this guide covers the differences. var name; name = Susie ; var height = 171; name = Anna ; Interactive Version","title":"Variables"},{"location":"javascript/#types","text":"Boolean - This type can have only 2 values true or false Number - These can be whole numbers (integers) or decimals (floating point numbers) Strings - A sequence of characters surrounded by quotes // Boolean values var skyIsBlue = true; var earthIsFlat = false; // Integers var total = 35; // Floating point numbers var pi = 3.14; // Strings var capitalCity = London ; var meaningOfLife = 42 ; var punctuation = @\u00a3$`!!{} ; Interactive Version","title":"Types"},{"location":"javascript/#operations-on-numbers","text":"In javascript it is possible to add + subtract - multiply * and divide / numbers. Numbers can also be incremented using ++ and decremented using --","title":"Operations on Numbers"},{"location":"javascript/#comments","text":"// In a javascript file denotes a comment. Any line that starts with // The browser will ignore. So in this example var x = 5; // x = 6; console.log(x); The value printed out will be 5","title":"Comments"},{"location":"javascript/#arrays","text":"An array is a list of items. For example [1,2,3]; []; [ apple , banana , cherry ]; [4, cat , true]; are all arrays. But typically they are assigned to a variable var shoppingList = [ apple , banana , cherry ]; There are multiple operations that can be performed on an array. It is possible to get a specific item from an array by it's index: var shoppingList = [ apple , banana , cherry ]; var firstItem = shoppingList[0]; Note the index of an array start from zero. It is also possible to get the number of items in a list: var shoppingList = [ apple , banana , cherry ]; var length = shoppingList.length; and add an item to the end of the list: var shoppingList = [ apple , banana , cherry ]; shoppingList.push( dates ); Interactive version of all array examples Full guide on arrays","title":"Arrays"},{"location":"javascript/#conditional-statements","text":"These are also know as if else statements. They are used to make sure that code is only executed if a statement is true. For example you might want your program to do something different depending on whether a variable has an even or an odd value. An if statement has the following structure: if(condition){ statement; } else { otherStatement; } where statement is executed if the condition is true and otherStatement is executed if it is false.","title":"Conditional Statements"},{"location":"javascript/#conditions","text":"The condition is a statement that evaluates to true or false. The expressions below all evaluate to true and show the different ways of comparing 2 items // 3 is equal to 3 3 === 3 // 3 is not equal to 2 3 !== 2 // 3 is less than 5 3 5 // 3 is greater than 1 3 1 // 3 is less than or equal to 3 3 = 3 // 3 is greater than or equal to 3 3 = 3","title":"Conditions"},{"location":"javascript/#putting-it-all-together","text":"var number = 5; if(number !== 5) { console.log( This is true ); } else { console.log( This is false ); } Interactive Version Conditional statements make code more interesting. Up to this point all the code has done the same thing every time it is run. With the introduction of if statement what the code does when executed now depends on whether or not the conditional statement is true or false. In the example above if number is assigned to 6 instead of 5 the code will do something different when it is run.","title":"Putting it all together"},{"location":"javascript/#loops","text":"A common scenario in programming is to want to execute the same instruction multiple times. For example printing to the console. One solution is to write the same line of code multiple times: console.log( hello ); console.log( hello ); console.log( hello ); console.log( hello ); console.log( hello ); However this is time consuming (even with copy and paste) and if we wanted to print goodbye instead it would be neccessary to change it 5 times. A better solution is to use a loop.","title":"Loops"},{"location":"javascript/#for-loops","text":"A for loop will repeat until a condition is false. So if the condition is never false it will run forever. for(var i = 0; i 5 ; i++) { console.log( hello ); } Interactive Example What the code above does is: create a variable called i and give it the value 0 check if i is less than 5 execute the code inside the curly brackets: console.log(\"hello\") Add 1 to i The code will continue to loop doing steps 2 to 4 until i is no longer less than 5. Once the loop has finished running the next line of code will be executed. For example for this program: for(var i = 0; i 5 ; i++) { console.log( hello ); } console.log( Finished executing loop ); Interactive Version The output would be: hello hello hello hello hello Finished executing loop The variable i we create can also be referred to in the code. For example if we wanted to print the numbers 1 to 10: for(var i = 1; i = 10 ; i++) { console.log(i); } Interactive Version","title":"For Loops"},{"location":"javascript/#for-loops-and-lists","text":"For loops can be used to iterate through lists. var fruits = [ apple , banana , cherry ]; for(var i = 0; i fruits.length; i++) { console.log(fruits[i]); } Interactive Version In this example the condition that makes the loop stops looping is related to the length of the list. Also the variable i is used as the index to retreive items from the list.","title":"For Loops and Lists"},{"location":"javascript/#functions","text":"Functions are a way to prevent you from having to write the same piece of code mutiple times. For example if you had to find the mean of 3 lists you would need to do the following: var mathsTestScores = [50, 70, 35, 60] var mathsTotal = 0; for(var i = 0; i mathsTestScores.length; i++) { mathsTotal = mathsTotal + mathsTestScores[i]; } var mathsAverageScore = mathsTotal / mathsTestScores.length var scienceTestScores = [65, 93, 52, 10] var scienceTotal = 0; for(var i = 0; i scienceTestScores.length; i++) { scienceTotal = scienceTotal + scienceTestScores[i]; } var scienceAverageScore = scienceTotal / scienceTestScores.length var englishTestScores = [53, 80, 49, 61] var englishTotal = 0; for(var i = 0; i englishTestScores.length; i++) { englishTotal = englishTotal + englishTestScores[i]; } var englishAverageScore = englishTotal / englishTestScores.length Interactive Version This is a lot of duplicated code. This is more effort to type out but also it's more likely you will make mistakes than if you were only typing it out once. Also if you changed the way you calculated the average and wanted the median instead of the mean you would need to change the code in lots of places. The solution is to use functions. Functions are bits of code that can be reused.","title":"Functions"},{"location":"javascript/#the-syntax","text":"function printHello() { console.log( Hello! ); } There are a few different parts to a function. First the function bit. This is to indicate that this will be a function. printHello this is the name of the function. Like variables this is how we refer to the function elsewhere in the code. You should give a function a name that reflects what it does. All functions need () , later examples will show why. The {} surround the code that belongs to the function and determines what the code actually does. So in the example above the function will console log Hello! . This code is not enough to actually get the function to do anything it just defines what the function will do. To actually get the code to log Hello! to the console you need to call it. printHello(); Interactive Version The name followed by () will execute the function and will cause the code inside the function to run. This is called calling a function. The function can be called many times.","title":"The Syntax"},{"location":"javascript/#more-interesting-functions","text":"A common problem in programming is performing a calculation for example working out the average of a list of scores. In order to do this the function also needs to know which list it is calculating the average of. This means the function also needs a parameter. This allows the caller of the function to give the function extra information. function calculateMean(scores){ var total = 0; for(var i = 0; i scores.length; i++) { total = total + total[i]; } var mean = total / scores.length; console.log(mean); } var mathsTestScores = [50, 70, 35, 60]; var scienceTestScores = [65, 93, 52, 10]; var englishTestScores = [53, 80, 49, 61]; calculateMean(mathsTestScores); calculateMean(englishTestScores); calculateMean(scienceTestScores); Interactive Version In this example the test scores are passed in and the result is logged to the console. There is much less duplication.","title":"More Interesting Functions"},{"location":"javascript/#returning-values","text":"In all the fucntion examples so far the result is logged straight to the console. This is not very useful. For example if you were making a website for a school you probably wouldn't want to log the mean score but display them on a website. This is done by using the return statement. function calculateMean(scores){ var total = 0; for(var i = 0; i scores.length; i++) { total = total + scores[i]; } var mean = total / scores.length; return mean; } var mathsTestScores = [50, 70, 35, 60]; var mean = calculateMean(mathsTestScores); Interactive Version Now the function doesn't log anything to the console it returns the result to the caller. In this example we have taken this value and assigned it to the variable called mean . We can now do anything with this variable we would do with any other variable. It could be logged to the console, displayed on a web page, passed to another function etc.","title":"Returning Values"},{"location":"links/","text":"Links MDN Web Docs MDN web docs have loads of information on web development. HTML Introduction to HTML HTML Elements List CSS Introduction to CSS Selectors in depth Common CSS properties Full list of CSS properties Inheritance CSS Box Model Javascript Introduction to Javascript Codecademy's Introduction to Javascript","title":"Useful Links"},{"location":"links/#links","text":"","title":"Links"},{"location":"links/#mdn-web-docs","text":"MDN web docs have loads of information on web development.","title":"MDN Web Docs"},{"location":"links/#html","text":"Introduction to HTML HTML Elements List","title":"HTML"},{"location":"links/#css","text":"Introduction to CSS Selectors in depth Common CSS properties Full list of CSS properties Inheritance CSS Box Model","title":"CSS"},{"location":"links/#javascript","text":"Introduction to Javascript Codecademy's Introduction to Javascript","title":"Javascript"}]}